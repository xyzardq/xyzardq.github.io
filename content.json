[{"title":"Windows下搭建Shadowoscks服务器端","date":"2017-04-14T02:17:04.000Z","path":"2017/04/14/Windows下搭建Shadowoscks服务器端/","text":"由于有建小号的需要，所以今天研究了下怎么Windows下搭建ss的服务器端。目前网上有Python 版、libev 版、Node.js 版等等几个版本的ss服务器端，不过多数版本都需要安装相应的依赖库，今天介绍的服务器端十分简单，不需要安装任何环境，只需要直接运行服务器端即可，那就是libQtShadowsocks。 食用方法下载libQtShadowsocks在Github上下载最新版的libQtShadowsocks，将安装包解压到一个文件夹里即可。 配置文件在文件夹中新建名为config.json的配置文件，内容如下：1234567891011&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:2333, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;xyzardq&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;http_proxy&quot;: false, &quot;auth&quot;: false&#125; 在文件夹中新建名为shadowsocks-server.bat的批处理文件，内容如下12@echo offshadowsocks-libqss.exe -c config.json -S 然后运行 shadowsocks-server.bat 即可。当出现TCP server listen at port 2333的结果是就证明运行成功了。需要关闭时就关闭批处理就行了。 参考资料Github在 Windows Server 上搭建 Shadowsocks 服务端","tags":[{"name":"VPS","slug":"VPS","permalink":"http://www.xyzardq.com/tags/VPS/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://www.xyzardq.com/tags/shadowsocks/"}]},{"title":"Linux学习笔记——第七章：Linux中的Shell编程","date":"2017-04-06T08:39:13.000Z","path":"2017/04/06/Linux学习笔记——第七章：Linux中的Shell编程/","text":"7.1 Shell编程基础 Shell脚本不用编译，编写好后就可以直接运行 程序的第一行一般为#!/bin/bash其中#表示该行是注释，!告诉Shell运行叹号之后的命令，即运行/bin/bash，并让/bin/bash去执行Shell脚本文件中的内容。 执行Shell程序的方法： bash &lt;脚本所在的路径&gt; [参数] 或 sh &lt;脚本所在的路径&gt; [参数] bash &lt; [Shell程序名] 用chmod命令使Shell程序成为可执行文件7.1.3 Shell变量1234# x=1# x=123# x=1 y=$x #使变量y等于变量x# unset x #删除变量 7.1.7 内部命令12345echoprintf #产生各种格式的输出exitexport [变量名] #定义全局变量read #从标准输入设备读入一行 7.2 Shell程序设计的流程控制7.2.1 复合结构 使用“{}” 使用“{}”括起来的多条命令在逻辑上成为一条命令 使用“()” 使用“()”会再创建一个新的紫禁城，然后由这个子进程去执行“()”中的命令7.2.2 条件判断if-then语句1234if 条件命令串then 条件为真时的命令串fi if-then-else语句123456if 条件命令串then 条件为真时的命令串else 条件为假时的命令串fi elif-if结构1234567if 条件命令串then 命令串elif 条件命令串then 命令串fi case条件选择1234case string in pattern1) 命令串;; pattern2) 命令串;; *) 命令串;;","tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xyzardq.com/tags/Linux/"}]},{"title":"Linux学习笔记——第四章：磁盘与文件管理","date":"2017-03-28T09:51:30.000Z","path":"2017/03/28/Linux学习笔记——第四章：磁盘与文件管理/","text":"4.1 磁盘管理4.1.2 查看磁盘空间12df [选项] [设备或文件名] #检查文件系统的磁盘空间占用情况du [选项] #统计目录所占磁盘空间的大小 4.1.4 制作镜像文件12dd if= of = #复制且转患文件格式cp [if] [of] #复制 4.2 文件与目录管理4.2.2 查看目录内容123cd [dirName] #进入目录pwd [选项] #查看当前工作目录的路径ls [选项] [目录或文件] #列出当前目录下的所有子目录和文件 4.2.3 查看文件内容12345more [选项] [用户名] #一页一页地显示内容cat [选项] [用户名] #查看文件内容tail [选项] [用户名] #显示文件的后几行tac #将文件内容从最后一行倒过来输出到屏幕上wc #文件内容统计命令 4.2.6 文件与目录的创建、复制、删除、转移及重命名12345touch #新建空文件或改变文件属性mkdir [选项] [用户名] #创建文件夹rmdir [选项] [用户名] #shanchu文件夹mv [选项] [if] [of] #移动文件rm [选项] [用户名] #删除文件 4.2.8 文件操作命令12grep [选项] [查找模式] [文件名] #查找文件里符合条件的字符串awk #解释型编程语言 4.2.9 文件的追加、合并、分割12echo [-ne] [字符串或环境变量] #等同于printfcat #查看文件内容 4.2.11 文件的链接12ln [源文件] [新建链接名] #硬链接ln -s [源文件] [新建链接名] #软连接 4.3 文件与目录的安全123chmod #改变文件或目录的读写和执行权限，可以用符号法或者八进制数字法chown #改变文件或目录的拥有者和群组chroot #改变程序执行时所参考的根目录位置 4.7 文件的压缩与解压缩4.7.1 压缩和解压缩命令1234gzip [选项] [文件名]bzip2 [选项] [文件名] #对文件进行压缩和解压缩gunzip [选项] [文件名.gz]bunzip2 [选项] [文件名.gz] #解压缩 4.7.3 显示压缩文件的内容 对于用gzip压缩的文件： 12zcat #直接显示压缩文件的内容zless #直接逐行显示压缩文件的内容 对于用bzip2压缩的文件： 12bzcat #直接显示压缩文件的内容bzless #直接逐行显示压缩文件的内容","tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xyzardq.com/tags/Linux/"}]},{"title":"Leanote常见问题汇总","date":"2017-03-27T12:50:06.000Z","path":"2017/03/27/Leanote常见问题汇总/","text":"此处列举了本人安装和使用leanote时遇到的各种问题，请善用Ctrl+F 找不到api-ms-win-crt-runtime-l1-1-0.dll当安装数据库运行mongod –dbpath D:\\dbanote时，有些系统会弹出窗口提示找不到api-ms-win-crt-runtime-l1-1-0.dll文件，此时上搜索引擎搜索“vc_redist.x64.exe”下载安装即可","tags":[{"name":"leanote","slug":"leanote","permalink":"http://www.xyzardq.com/tags/leanote/"}]},{"title":"Leanote进阶配置汇总","date":"2017-03-27T11:58:43.000Z","path":"2017/03/27/Leanote进阶配置汇总/","text":"此篇教程为leanote个人服务端搭建成功后的进阶配置，请在搭建好个人服务端后食用 如何绑定域名?比如想绑定域名x.com到你运行Leanote服务器,需要完成以下几个步骤： 你需要将leanote以80端口运行, 请修改conf/app.conf的如下配置： 12http.port=80site.url=http://a.com 将IP以A形式绑定到域名（不需要加端口号） 如果服务器上已有其它程序运行了80端口，怎么办呢？请google或百度下 “使用nginx分发请求到不同端口”。 为Mongodb添加用户名和密码按照官网教程启动Mongodb是没有权限控制的, 如果你的Leanote服务器暴露在外网, 任何人都可以访问你的Mongodb并修改, 所以这是极其危险的！请务必为Mongodb添加用户名和密码并以auth启动。启动步骤： 为leanote数据库新建一个用户mognodb v2与v3创建用户命令有所不同(1) mongodb v2 创建用户如下:123456789101112&gt; use leanote;# 添加一个用户root, 密码是abc123&gt; db.addUser(&quot;root&quot;, &quot;abc123&quot;);&#123; &quot;_id&quot; : ObjectId(&quot;53688d1950cc1813efb9564c&quot;), &quot;user&quot; : &quot;root&quot;, &quot;readOnly&quot; : false, &quot;pwd&quot; : &quot;e014bfea4a9c3c27ab34e50bd1ef0955&quot;&#125;# 测试下是否正确&gt; db.auth(&quot;root&quot;, &quot;abc123&quot;);1 # 返回1表示正确 (2) mongodb v3 创建用户如下:1234567891011# 首先切换到leanote数据库下&gt; use leanote;# 添加一个用户root, 密码是abc123&gt; db.createUser(&#123; user: &apos;root&apos;, pwd: &apos;abc123&apos;, roles: [&#123;role: &apos;dbOwner&apos;, db: &apos;leanote&apos;&#125;]&#125;);# 测试下是否正确&gt; db.auth(&quot;root&quot;, &quot;abc123&quot;);1 # 返回1表示正确 并开启权限验证在mongod的终端按ctrl+c即可退出mongodb.启动mongodb:$&gt; mongod –dbpath /home/user1/data –auth 修改配置文件修改 leanote/conf/app.conf: 12345db.host=localhostdb.port=27017db.dbname=leanote # requireddb.username=root # if not exists, please leave blankdb.password=abc123 # if not exists, please leave blank 参考资料leanote 安装/配置问题汇总","tags":[{"name":"leanote","slug":"leanote","permalink":"http://www.xyzardq.com/tags/leanote/"}]},{"title":"Leanote二进制版安装教程forWindows","date":"2017-03-27T08:51:35.000Z","path":"2017/03/27/Leanote二进制版安装教程forWindows/","text":"作为一个笔记软件重度用户，我也换了几个笔记软件，从垃圾的不行的evernote（不支持多级文件夹，不支持markdowm）到功能尚可的wiznote，最近发现的leanote（蚂蚁笔记）又比前两者强了不少，不仅支持markdowm输入的 WYSIWYG（所见即所得），还有对vim和Emacs输入模式支持，最重要的是，leanote是全开源的软件，支持将服务端部署到自己的服务器上。如此geek且功能多样的笔记软件，在我看来是极客的不二选择。废话少说，下面来介绍一下leanote二进制版for Windows的安装教程。 前言从官方wiki我们可以看到，leanote有分为多个平台，有两个版本的安装教程，分别是二进制版和源码版。源码版专为开发人员设计，需要安装开发环境，而二进制版则只需要安装数据库和本体即可。本片教程选择的是二进制版forWindows的安装。 1. 下载 leanote 二进制版下载leanote 二进制版，根据系统选择相应的版本。将下载得到的leanote文件夹放在任意目录，下面假设放在D:\\user1，则现在应该有D:\\user1\\leanote。 2. 安装 mongodb2.1 安装 mongodb到 mongodb官网 下载相应系统的最新版安装包。一直点击下一步默认安装。采用默认设置或自定义安装。 2.2 测试mongodb安装建立一个文件夹用于放置笔记的数据文件，假设文件夹目录为D:\\dbanote。打开命令行（cmd）输入以下命令：mongod –dbpath D:\\dbanote 当出现以下界面时，表示数据库已经运行成功将该命令行窗口最小化后，重新打开一个命令行窗口，输入：mongo 显示mongo命令行界面再输入：show dbs 若此时结果显示类似12admin 0.000GBlocal 0.000GB 则说明mongodb加载成功。为方便以下的步骤，建议继续保留此命令行窗口。 导入初始数据再打开一个命令行窗口，输入以下命令，注意对应你安装的mongdb的版本： mongodb v2 的导入命令为：mongorestore -h localhost -d leanote –directoryperdb D:\\user1\\leanote\\mongodb_backup\\leanote_install_data mongodb v3 的导入命令为：mongorestore -h localhost -d leanote –dir D:\\user1\\leanote\\mongodb_backup\\leanote_install_data为测试导入数据，继续在导入数据的命令行输入： 1234&gt; show dbs # 查看数据库admin 0.000GBleanote 0.000GB # Leanote 导入成功的数据库local 0.000GB 注意：导入成功的数据已经包含2个用户： user1 username: admin, password: abc123 (管理员, 只有该用户可以管理后台) user2 username: demo@leanote.com, password: demo@leanote.com (仅供体验使用) 4. 配置leanoteleanote的配置存储在文件 conf/app.conf 中。请务必修改app.secret一项, 在若干个随机位置处，将字符修改成一个其他的值, 否则会有安全隐患！其它的配置可暂时保持不变, 若需要配置数据库信息, 请参照 leanote问题汇总。 5. 运行Leanote以管理员权限打开cmd，输入：12cd D:\\user1\\leanote\\binrun.bat 当出现以下界面时，说明leanote运行成功。以上，leanote二进制版安装forWindows就正式完成了~本人搭建的leanote 其他进阶应用常见问题 参考资料Leanote 二进制版详细安装教程 Windows","tags":[{"name":"leanote","slug":"leanote","permalink":"http://www.xyzardq.com/tags/leanote/"}]},{"title":"Android学习笔记——listview和自定义adapter","date":"2017-03-24T08:39:16.000Z","path":"2017/03/24/Android学习笔记——listview和自定义adapter/","text":"自定义adapter是listview中使用最多的一个Adapter适配器，因为它可以自定义listview的布局样式。在学习和查找资料以后，我也自己写了一个自定义adapter的Demo，下面通过我的Demo来了解一下如何写一个自定义Adapter。 1. 定义数据Model创建一个测试用类123456789101112131415161718192021222324252627282930public class ArrayTest &#123; public ArrayTest(String topic, String time,int picture)&#123; this.topic = topic; this.time = time; this.picture = picture; &#125; private int picture; private String topic; private String time; public int getPicture()&#123; return picture; &#125; public void setPicture(int picture)&#123; this.picture = picture; &#125; public String getTopic() &#123; return topic; &#125; public void setTopic(String topic) &#123; this.topic = topic; &#125; public String getTime() &#123; return time; &#125; public void setTime(String time) &#123; this.time = time; &#125; 2. 定义布局样式我自己做的布局样式是这样的：以下是代码：1234567891011121314151617181920212223242526272829303132&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.xyzardq.appfortest.MainActivity&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/topic&quot; android:text=&quot;Topic&quot; android:textSize=&quot;30dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/time&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_below=&quot;@+id/topic&quot; android:text=&quot;12:00&quot; /&gt; &lt;ImageView android:id=&quot;@+id/picture&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_alignTop=&quot;@+id/topic&quot; /&gt;&lt;/RelativeLayout&gt; 3. 自定义Adapter创建一个类继承BaseAdapter，复写BaseAdapter中的四个方法 public int getCount()： 是用来返回数据的数量的。 public Object getItem(int position): 该方法使用来获得每一条ListView中的Item的，这里我们返回position即可，position是指每条Item在ListView中的位置（0， 1， 2……）。 public long getItemId(int position)： 该方法是来获得ListView中每条Item的Id的，这里我们依然返回position即可。 public View getView(int position, View convertview, ViewGroup viewGroup): 该方法是自定义Adapter最重要的方法，在这个方法中我们需要将数据一一对应的映射或者添加到我们自己定义的View中。然后返回view。 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class ArrayTestAdapter extends BaseAdapter &#123; private List&lt;ArrayTest&gt; mData;//定义数据。 private LayoutInflater mInflater;//定义Inflater,加载我们自定义的布局。 /* 定义构造器，在Activity创建对象Adapter的时候将数据data和Inflater传入自定义的Adapter中进行处理。 */ public ArrayTestAdapter(LayoutInflater inflater,List&lt;ArrayTest&gt; data)&#123; mInflater = inflater; mData = data; &#125; @Override public int getCount() &#123; return mData.size(); &#125; @Override public Object getItem(int position) &#123; return position; &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(int position, View convertview, ViewGroup viewGroup) &#123; //获得ListView中的view View viewArrayTest = mInflater.inflate(R.layout.main_item,null); //获得布局对象 ArrayTest arrayTest = mData.get(position); //获得自定义布局中每一个控件的对象。 TextView name = (TextView) viewArrayTest.findViewById(R.id.topic); TextView age = (TextView) viewArrayTest.findViewById(R.id.time); ImageView picture = (ImageView) viewArrayTest.findViewById(R.id.picture); //将数据一一添加到自定义的布局中。 name.setText(arrayTest.getTopic()); age.setText(arrayTest.getTime()); picture.setBackgroundResource(arrayTest.getPicture()); return viewArrayTest ; &#125;&#125; 4. 加载自定义Adapter到Listview中在onCreate函数中定义并加载listview对象，将自定义Adapter添加进去，并添加数据12345678910111213141516171819202122232425262728293031323334353637383940public class MainActivity extends AppCompatActivity &#123; //定义数据 private List&lt;ArrayTest&gt; mData; //定义ListView对象 private ListView ListView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //为ListView对象赋值 ListView = (ListView) findViewById(R.id.listview); LayoutInflater inflater = getLayoutInflater(); //初始化数据 initData(); //创建自定义Adapter的对象 ArrayTestAdapter adapter = new ArrayTestAdapter(inflater, mData); //将布局添加到ListView中 ListView.setAdapter(adapter); &#125; /* 初始化数据 */ private void initData() &#123; Date now = new Date(); SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;); String stime = dateFormat.format( now ); mData = new ArrayList&lt;ArrayTest&gt;(); ArrayTest test1 = new ArrayTest(&quot;哦哈哟&quot;, stime,R.mipmap.ic_launcher); ArrayTest test2 = new ArrayTest(&quot;扣你鸡哇&quot;, stime,R.mipmap.ic_launcher); ArrayTest test3 = new ArrayTest(&quot;哈喽&quot;, stime,R.mipmap.ic_launcher); mData.add(test1); mData.add(test2); mData.add(test3); &#125;&#125; 最后的界面为： 参考资料Android疯狂讲义（第三版）Android UI设计——ListView控件和自定义Adapter（四）","tags":[{"name":"Android","slug":"Android","permalink":"http://www.xyzardq.com/tags/Android/"}]},{"title":"Android常见问题解决方案","date":"2017-03-10T02:20:07.000Z","path":"2017/03/10/Android常见问题解决方案/","text":"最近由于一个grade的问题，重装了as和sdk四五次。。。最后才在网上找到了解决方法。于是就想着吧一些很难解决的错误记录下来，供以后查看。 常见错误无法创建Grade/无法识别Grade也是版本不兼容所导致的的，最简单的解决方法是把当前用户文件夹下的.grade文件夹删掉，再重开项目等待as重建该文件夹 错误代码Error while executing: am startservice com.xxx.xxx/com.android.tools.fd.runtime.InstantRunService Starting service: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.xyzardq.qweather/com.android.tools.fd.runtime.InstantRunService } Error: Not found; no service started.通常是由于新版as中运行了旧版的as所导致的的。暂时的解决方法是进入File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Instant Run把Instant Run关掉","tags":[{"name":"Android","slug":"Android","permalink":"http://www.xyzardq.com/tags/Android/"}]},{"title":"服务器一键搭建shadowsocks及优化","date":"2017-03-07T00:41:10.000Z","path":"2017/03/07/服务器一键搭建shadowsocks及优化/","text":"自从第一次剁了台vps，感觉有点上瘾，最近开了几个vps来玩（感觉钱包药丸）不过都只搭了SS。所以今天就总结下搭建shadowsocks server的一些一键脚本及其优化吧。 shadowsocks server一键安装脚本 名称 描述 shadowsocksR 一键安装（推荐） ShadowsocksR 的 Python 语言实现的版本 shadowsocks Python 一键安装 Shadowsocks 的 Python 语言实现的版本 shadowsocks libev 一键安装 Shadowsocks 的 C 语言实现的版本 shadowsocks go 一键安装 Shadowsocks 的 Go 语言实现的版本 Tips:由于某种原因，ss已经停止更新，而另一个作者做的ssr一直在保持更新，加入了不少新特性。所以推荐使用ssr的服务器端，而且ssr也是兼容ss的。 手动安装shadowsocks server手动安装shadowsocks客户端比较麻烦，将客户端程序放入vps启动后，还要手动调节混淆，设置成开机启动，并且修改防火墙设置，所以比较推荐使用一键安装脚本 名称 描述 搭建shadowsocksR ShadowsocksR 的 Python 语言实现的版本 搭建shadowsocks libev Shadowsocks 的 C 语言实现的版本 搭建shadowsocksR libev ShadowsocksR 的 C 语言实现的版本 优化shadowsocks server由于vps邻居对带宽的滥用，很多时候即使ss搭建好了速度也很慢，20mbps的带宽，连也y2b720P都看不了。这时候就需要对服务器进行一些优化了。 单边加速篇单边加速就是只需要在服务器安装服务器端而不需要再用户处安装客户端。需要注意的是，单边加速基本只适用于非openVZ的vps，因为openVZ无法修改内核。不过最近出了个ovz里装虚拟机从而使用单边加速的黑科技，但是比较繁琐，后面我会贴上教程。 名称 描述 serverspeeder(锐速) 多倍发包的鼻祖=。=加速效果显著但是邻居受影响极大 net speeder 高延迟不稳定链路上优化单线程下载速度 TCP BBR（推荐） google开发的新内核， 目的是要尽量跑满带宽，对领居影响很小 双边加速篇双边加速是在客户端和服务器端都要装上加速软件，比较麻烦，不过加速效果显著，而且可以再openVZ的VPS上配置。 名称 描述 其他 kcptun（推荐） 使用kcp协议传输数据 github FinalSpeed 压缩流量以增加传输成功率 黑科技及小技巧篇openVZ下启动BBRTips:作者建议在1G内存以上的vps中使用，实际应用中，有人用128的小鸡成功启动了虚拟机…所以说见仁见智吧2017.4.14更新：91yun里有人做了UML+BBR+SSR的一键脚本作者称可在128小鸡下运行，实测可在256小鸡下运行 一些shadowsocks server的优化小技巧：shadowsocks 优化篇参考资料大部分脚本转载自秋水逸冰的一键安装脚本秋水逸冰一键脚本那些事儿Github_shadowsocks_install91yun_Github","tags":[{"name":"VPS","slug":"VPS","permalink":"http://www.xyzardq.com/tags/VPS/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://www.xyzardq.com/tags/shadowsocks/"}]},{"title":"Linux学习笔记——第三章：系统管理","date":"2017-03-06T08:51:39.000Z","path":"2017/03/06/Linux学习笔记——第三章：系统管理/","text":"3.1用户管理3.1.1 用户管理1234useradd [选项] [用户账号] #建立用户账号passwd [选项] [用户账号] #更改账号密码userdel -r [用户账号] #删除用户账号及其相关的文件，-r删除用户主目录以及目录中的所有文件usermod [选项] [用户账号] #修改用户信息 3.1.2 组管理12345groupadd [选项] [组名] #创建一个新组群groupdel [选项] [组名] #删除组群groupmod [选项] [组名] #更改组群识别码或名称gpasswd [选项] [组名] #管理组newgrp [选项] [组名] #切换当前登录用户所在组 3.1.4 su和sudo命令12su [选项] [用户账号] #切换到另一个账户，默认值为root账户sudo [-bhHpV] [-s] [-u用户] command #以另一个账号的身份运行指定命令 3.2 进程管理3.2.1 监视进程123ps #显示系统中进程的信息pstree #以树状方式表现进程的父子关系top #显示当前系统正在执行的进程的相关信息 3.2.3 控制进程12kill [选项] PID #根据PID终止一个进程killall [signal] [进程名] #根据进程名终止一个进程 3.4 其他系统管理3.4.1 查询系统状况12uname [选项] #显示计算机以及操作系统的相关信息free [选项] #显示系统使用和空闲的内存状况 3.4.3 系统日志和dmesg命令 /var/log/messages #核心系统日志文件 /var/log/secure #记录安全相关的信息 3.4.4 关机等命令shutdown [选项] [时间] [警告信息] #关机reboot [选项] #重启logout #用户注销","tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xyzardq.com/tags/Linux/"}]},{"title":"Linux学习笔记——第二章：Linux的用户接口与文本编辑器","date":"2017-03-03T03:06:04.000Z","path":"2017/03/03/Linux学习笔记——第二章：Linux的用户接口与文本编辑器/","text":"2.1 Shell2.1.3 命令和文件名的自动补齐功能在命令和文件名输入到一半时，按Tab可以自动匹配命令和文件名剩余的部分，如果有多个可匹配选项，会在下方逐一列出来。 2.1.5 命令别名123alias #查询当前已经定义的alias列表alias [别名]=[命令名称] #设置命令的别名unalias [别名] #取消别名设置 注意:alias命令仅对该次登录系统有效，如果希望每次登陆系统都能够使用该命令别名，可以编辑~/.bashrc（root用户是/root/.bashrc，普通用户是/home/*/.bashrc，按照alias [别名]=[要替换的终端命令]添加一行命令，注销，再次登录系统，就可以使用了。） 2.1.6 通配符与文件名变量 通配符 说明 * 匹配任何字符和任何数字的字符组合 ? 匹配任何单个字符 [] 匹配任何包含在括号里的单字符 2.1.7 输入/输出重定向和管道输入重定向：从文件输入命令或可执行文件程序的标准输出重定向：把结果输出重定向到一个文件里12345&lt; #输入重定向&gt; #正确输出重定向、重写文件&gt;&gt; #正确输出重定向、不重写文件2&gt;(2&gt;&gt;) #错误输出重定向&amp;&gt;(&amp;&gt;&gt;) #输出重定向（无论正误） Tip:1.可以双重输出重定向1ls -l 2&gt;error.txt &gt;results.txt 管道管道可以把一系列命令链接一起。第一个命令的输出会通过管道传给第二个命令，并且作为第二个命令的输入，第二个命令的输出优惠作为第三个命令的输入，以此类推而管道中的最后一个命令的输出才会显示在屏幕上，如果命令行里使用了输出重定向，将会放进一个文件里。例如：1cat file.txt| grep &quot;ztg&quot; |wc -l 这个管道将cat命令的输出作为grep命令的输入，grep命令的输出则是所有包含单词ztg的行，这个输出又被送给wc命令。 2.4 实例：使用vim编辑文件在命令行中执行命令vim filename，如果filename已存在，则filename被打开且显示其内容；如果filename不存在，则vim在第一次存盘时自动在硬盘上新建filename文件。vim拥有5种编辑模式：命令模式、输入模式、末行模式、可视化模式、查询模式。具体命令查看书p55-p62。 常用命令ls 查看当前目录下文件和文件夹pwd查看当前目录的绝对路径cat [文件]查看指定文件的内容","tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xyzardq.com/tags/Linux/"}]},{"title":"通过wifi连接ADB调试Android应用","date":"2017-02-25T02:43:04.000Z","path":"2017/02/25/通过wifi连接ADB调试Android应用/","text":"以前我调试Android程序都是用usb线连接手机和电脑调试，之后无意间发现一款叫Andoird ADB的app后才发现adb调试是多么好用！于是我从网上找了不少adb调试应用的方法，在这里总结出来。 adb简介ADB全称Android Debug Bridge，主要存放在sdk安装目录下的platform-tools文件夹中，它是一个非常强大的命令行工具，通过这个工具你能够与你的android设备进行交互。同时这是一个包含了以下三部分的cs模式的程序： adb client 从图中，我们知道client是运行在PC端的，每当我们发起一个adb命令的时候，就会开启一个client程序。当然，当我们开启DDMS或者ADT的时候，也会自动创建client。 当我们开启一个client的时候，它首先会去检测后台是否已经有一个server程序在运行着，否则会开启一个adb-server进程。 所有的client都是通过5037端口与adb-server进行通信的。 adb daemon（adbd） 从图中，我们知道daemon是作为一个后台进程运行在模拟器/真实Android设备中的。 daemon使用端口的范围是5554-5585，每个模拟器/设备连接到PC端时，总会开启这么一个后台进程，并且为其分配了两个连续的端口，比如： 123 Emulator 1, console: 5554 Emulator 1, adb: 5555 也正因为每个设备都分一组两个端口，也已adb连接手机的最大数量为16。 说回端口的作用，在这两个端口中，其中偶数端口是用于server 与设备进行交互的，可以让server直接从设备中读取数据，而奇数端口是用来与设备的adbd进行连接通信的。 adb server 从图中，我们同样可以知道，server也是作为一个后台的程序运行在PC端的，他负责管理client进程以及adb daemon之间的通信。 当一个server开启的时候，他会自动绑定并且监听5037端口，接收client通过该端口发送过来的命令。同时server还会对5555-5585间的奇数端口进行扫描，进行对已连接设备的定位。 使用adb连接电脑使用app连接adb调试有两种开启方法，最简单的是使用别人写好的程序进行开启。直接在应用商店中搜索wifi adb,adb等字样就能找到数十款adb调试应用，安装打开后一键开启adb，然后按提示从电脑连接即可。注意，连接前需要保证程序拥有root权限，而且电脑和手机处于同一局域网内。 手动连接除了使用app连接外，我们还可以通过从终端更改adb设置来连接。 食用方法默认情况下ADB的连接方式为USB,所以需要更改ADB的连接方式.在手机上打开终端模拟器（终端模拟器是类似linux中的终端，可以在网上下载到这个app）输入以下命令：12345su #获取root权限setprop service.adb.tcp.port 5555 #将adb的连接方式改为TCP方式并且在端口5555上进行监听stop adbdstart adbd #重启adb服务netcfg #显示当前手机在局域网中的ip地址 在得出的数据中寻找类似wlan0 UP 192.168.1.1/1的字符串，其中192.168.1.1/1就是手机在局域网中的ip地址 进阶食用方法上述命令中的setprop service.adb.tcp.port 5555可以更改为persist service.adb.tcp.port 5555，这样就可以保证手机在重启后还保持相同的设置，就不会出现重启后又得重新手动修改adb设置的情况。 参考资料Android配置—-小米手机通过wifi连接ADB调试Android应用Android学习第一天-adb常用命令","tags":[{"name":"Android","slug":"Android","permalink":"http://www.xyzardq.com/tags/Android/"},{"name":"ADB","slug":"ADB","permalink":"http://www.xyzardq.com/tags/ADB/"}]},{"title":"C语言程序运行后闪退的解决方法","date":"2017-02-25T02:10:06.000Z","path":"2017/02/25/C语言程序运行后闪退的解决方法/","text":"（日常吐槽部分）仔细一看我有两个月没写博客了。其实，我是不想鸽的（）寒假开始前，我都定好了一个非常宏z伟z的计划，每周写XX篇博客啥的，结果发现计划不如变化，三天至少出去玩两天（）于是寒假计划就变成开学计划了！ 前言不BB了，虽然寒假计划没了，不过囤了不少想法√。所以今天就谈谈C语言程序运行后闪退的解决方法。之前因为做qq bot的需要，装了vc来写C++和C，发现了一个问题，就是写好一个简单的C程序，运行结束后就直接退出了。当时还在想是不是程序的问题，换了一个IDE，运行相同的程序发现最后会有按任意键退出的提示。 问题起因最后发现其实是vc的问题，在整个程序运行完成后vc会自动结束程序，而不是像一些ide会自动往程序最后一行插入一个暂停语句。 解决方法 在代码段末尾加上getch();就可以了。（代码段末尾指你程序要执行完之前， 一般在return 0;之前）或者，加上getchar(); 也行。原理就是停止，等待用户输入，即你没输入的话，程序就不算执行完毕。个人认为getch();比较好。因为你加getch();是按任意键退出，而getchar();，你可以输入若干个字符然后按回车才会结束。 加个头文件windows.h，然后在代码段末尾加个 system(“pause”);这里的system就是调用从程序中调用系统命令（和shell命令）。system(“pause”)就是从程序里调用“pause”命令；而“pause”这个系统命令的功能很简单，就是在命令行上输出一行类似于Press any key to exit的字，等待用户按一个键，然后返回。还是同样的道理，等待用户输入，才能算执行完毕。 在exe文件同目录下新建一个txt文档，里面输入如下内容 12xx.exepause 然后退出保存，把后缀txt改为bat然后运行，那个xx就是文件的名字。然后打开.bat文件运行程序。(.bat文件命名随意)这里的.bat文件是批处理文件（也被称为批处理程序或脚本）是无格式的文本文件，它包含一条或多条命令。它的文件扩展名为 .bat 或 .cmd。在命令提示下键入批处理文件的名称，操作系统就会按照该文件中各个命令出现的顺序来逐个运行它们。（使用批处理文件，可以简化日常或重复性任务。）这里执行了xx.exe这个程序，并且调用了pause。 类似解决方案2. 参考资料 打开c语言生成exe文件，出现闪退的解决方法","tags":[{"name":"C","slug":"C","permalink":"http://www.xyzardq.com/tags/C/"}]},{"title":"服务器概念科普","date":"2016-11-28T02:15:40.000Z","path":"2016/11/28/服务器概念科普/","text":"每周一篇的Blog不知道要写些什么，正好昨天剁了台辣鸡vps，就来讲讲服务器的各种概念吧（哼哼，为了买服务器我还是研究了很久的说 各种服务器的定义和区别目前市场上最流行的服务器是VPS，其次还有独服，ECS，虚拟主机 独立服务器（独服，杜甫，毒妇）独立服务器，顾名思义，就是一个躺在机房的实实在在的物理服务器，也可理解为你的游戏主机一样。 优点：性能高 缺点：价格高，高可用性低（比如断电，硬盘坏了……） VPSVirtual Private Server 虚拟专用服务器,一般是将一个独立服务器通过虚拟化技术虚拟成多个虚拟专用服务器。 优点：价格便宜 缺点：性能低，高可用性低（除了其所在的物理机出问题了会收到影响，虚拟化技术出问题也会收到影响） 云服务器Elastic Compute Service, 简称ECS 好多人理解云服务器和VPS一样，更有甚者说以前的VPS现在的说法就是云服务器，其实不然，云服务器是一个计算，网络，存储的组合。简单点说就是通过多个CPU，内存，硬盘组成的计算池和存储池和网络的组合。 优点：价格适中，使用灵活，高可用性（单个或多个物理离线不会对整个服务造成太大的影响） 缺点：性能相对较低 虚拟主机Virtual hosts （Vhost）虚拟主机是通过，物理服务器，VPS或者云服务器安装例如CPanel，Plesk等面板搭建的。虚拟主机市场比较混乱，不同的厂商价格一般会有很大的差异，一般来说看一个虚拟主机的好坏可以从以下几点来看，主机系统：CloudLinux 更适合多租户虚拟主机，CPanel，Plesk 面板在市场上最受市场欢迎，一般来说价格相对较贵，使用云服务器最好（比如阿里云），物理服务器也可，一般不选择VPS作为虚拟主机的服务器。 优点：价格低，使用方便 缺点：一般来说只能做网站，或应用后端服务器，市场杂乱比较难选购 （以上资料转自VPS 与虚拟主机有什么异同？） 总结正常使用的话，独服就不在考虑范围以内了，太贵了。虚拟主机只能用来建站，适用范围比较小，所以买服务器一般考虑VPS和ECS。国外VPS比较多，国内不少大厂的云服务提供的是ECS，比如腾讯云。VPS性价比比较高，但是相应的水也很深。所以，如果只是用来做站的推荐购买虚拟主机，用来搭梯子，建网站，挂脚本的，推荐VPS，下面也着重讲解VPS。 OPENVZ、KVM、Xen、VMware的区别选购VPS时，经常可以看到OPENVZ(OVZ)，KVM等字眼。这些事Linux虚拟化技术。通常，VPS都是由一个独服（母鸡）通过虚拟化做成的很多歌小鸡，而OVZ和KVM就是虚拟这些小鸡的虚拟化技术。下面简单介绍一下他们的区别。 OPENVZ这个平台是最便宜的VPS平台，在各个vps商哪里都是价格最低的。OPENVZ本身运行在linux之上，它通过自己的虚拟化技术把一个 服务器虚拟化成多个可以分别安装操作系统的实例，这样的每一个实体就是一个VPS，从客户的角度来看这就是一个虚拟的服务器，可以等同看做一台独立的服务 器。OPENVZ虚拟化出来的VPS只能安装linux操作系统，不能安装windows系统，比如Centos、Fedora、 Gentoo、Debian等。不能安装windows操作系统是openvz的第一个缺点，需要使用windows平台的用户不能使用OPENVZ VPS。OPENVZ的第二个缺点是OPENVZ不是完全的虚拟化，每个VPS账户共用母机内核，不能单独修改内核。好在绝大多少用户根本不需要修改内 核，所以这个缺点对多数人可以忽略不计。而这一点也正是openvz的优点，这一共用内核特性使得openvz的效率最高，超过KVM、Xen、 VMware等平台。在不超售的情况下，openvz是最快速效率最高的VPS平台。 KVM、Xen、VMware这几个VPS平台可以归为一类，它们在虚拟化母机时，是完全的虚拟化，各个VPS示例之间不共用母机内核，各自都是独立 的，几乎所有的操作系统都可以安装到这些被虚拟化出来的VPS上。完全的虚拟化使得这些平台的VPS效率上要低于OPENVZ。但由于其完全的虚拟化，同 一母机上的各个VPS之间几乎没有相互干扰，而OPENVZ则取决于VPS是否超售，如果openvz VPS被超售，则性能会受到影响。如果位于同一母机上的openvz VPS有滥用资源行为，将会影响到其它VPS的性能。OPENVZ的这一特点和虚拟主机很类似。虚拟主机就是完全共用虚拟主机母机的资源，虚拟主机的性能 受到同一母机上其它虚拟主机的影响最大。OPENVZ则比虚拟主机要好很多。KVM、Xen、VMware平台的VPS则几乎完全不受其它VPS账户的影响。 （以上资料转自虚拟化） 总结现在VMware已经很少见了,Xen用的网站很少，出现的基本都是KVM和OVZ。OVZ咋一看性价比很高，但是其实很不稳定。第一，OVZ是最好超售的机型，KVM一般只能超售三倍，OVZ可以超售十几倍之多，性能和面板相比差距很大。第二，OVZ的网速很容易受同一母鸡上其他小鸡的影响，如果你的邻居都是些挂D攻击，锐速加速之类的，你的日子就不好过了…总之追求稳定性的话应该选KVM。一般来说，KVM&gt;Xen&gt;openvz 一些零散概念oneman:指只有一个人经营的idc服务商，业内比较出名的有ramnode，不过这家严格说并不是oneman，人家是夫妻店，是俩人23333。还有那个常年侮辱中国客户的bugetvz，是个澳洲村炮自己开的oneman店。 小鸡：指小型vps，往往配置非常低，但是麻雀虽小五脏俱全，往往都有独立ip，同时价格也很便宜。另外一个意思就是独立服务器里开出来的小vps，也叫小鸡。 母鸡：指独立服务器。因为vps都是拿独立服务器虚拟出来的（其实就是独服开了一堆虚拟机），所以小vps叫小鸡，生出小vps来的独服叫母鸡。 超售：前面说了，vps其实就是独服的虚拟机。超售就是开了太多的小鸡在独服里。举个例子，本来一台独服是4核4g内存，如果用kvm开小鸡，如果要开的套餐是1核1g内存，那么就只能开4台出来。但是实际的情况并不是这样，商家为了多赚钱，强行开了八台出来，还全都是1核512m内存的，其原因就是超了cpu，强行让本来应该为四个人服务的cpu给八个人服务，但是却内存没超。虚拟的主流架构有openvz，kvm和xen，其中ovz啥都能超，kvm可以超cpu但是不能超内存和硬盘。xen不太了解，应该和kvm一样（存疑，超售的这个具体原理我也不是很懂） 传家宝：部分vps卖断货后，往往其价格会飞速飙升。这是因为如果商家不再开卖的话，一台母鸡里就这么多小鸡了，商家不会再超售了。那么小鸡的稳定性就大大提升，求购二手vps的基佬就会趋之若鹜，价格自然水涨船高。当年搬瓦工3.99刀卖断货后价格一度飞涨七八倍，涨幅都超过五道口宇宙中心的房价涨幅了，被戏称为传家宝。传家宝一名因此得来。 黄牛：倒卖各种二手vps的人，称之为黄牛，鄙人也是做这买卖的。干这行非常考验眼力和手速，当然利润也是相当不错。曾经一刀买的800块人民币卖掉了，我会乱说？ 石头盘：指硬盘io过低的vps。基本低于100m/s就是石头盘了。有人笑称是用石头做出来的硬盘，因此得名。硬盘转速太低基本干啥都卡，因此大家都不喜欢石头盘的vps。与此同时还有一个说法是钻石盘，指垃圾中的战斗机硬盘。当年cac的vps一度跑出了10m/s的成绩，惊为天人，简直是石头盘中的石头盘，钻石盘这个说法就出来了。 探针：一个php小程序，挂在vps上能够查看vps的各项参数性能。基佬们经常互相交换探针地址来加深友♂谊，是py交易的前奏。 油管：指youtube，很多基佬喜欢用u2b的视频播放效果来衡量线路的好坏，虽然这个并不是一个很精准的检验方法。 海外机房缩写：HK香港，KR韩国，JP日本，SG新加坡， LA洛杉矶。 （以上资料转自VPS黑话大全） 参考资料VPS 与虚拟主机有什么异同？虚拟化VPS黑话大全","tags":[{"name":"VPS","slug":"VPS","permalink":"http://www.xyzardq.com/tags/VPS/"},{"name":"hosts","slug":"hosts","permalink":"http://www.xyzardq.com/tags/hosts/"}]},{"title":"Windows实用软件推荐","date":"2016-11-21T01:05:49.000Z","path":"2016/11/21/Windows实用软件推荐/","text":"以下软件是博主亲自用过后比较得出的。 同类软件推荐不超过两个，免得选择强迫症抓狂（ 想到再写 系统工具 软件类型 软件名称 一句话描述 资源扩展 桌面美化 Rainmeter 资源最丰富的桌面美化软件 中文主站、雨滴中文论坛 SAO Utils 最炫酷的SAO启动菜单 快速启动 Launchy 轻度定制的快速启动软件 Launchy skin on deviantart 文件搜索 Everything 搜索整个硬盘只需几秒 镜像工具 DAEMON Tools Lite 使用方便，UI简洁 截图工具 snipaste 专注截图的截图工具 puush 截图+图床 远程控制 Teamviewer 简单实用 多媒体 软件类型 软件名称 一句话描述 资源扩展 视频播放 Potplayer 简洁UI，丰富功能 音乐播放 网易云音乐 丰富的歌单，人性的交互 视频格式 格式工厂 支持格式丰富，使用方便 网络工具 软件类型 软件名称 一句话描述 资源扩展 浏览器 Chrome 没什么好说的 Chrome网上应用店","tags":[{"name":"Windows","slug":"Windows","permalink":"http://www.xyzardq.com/tags/Windows/"},{"name":"UWP","slug":"UWP","permalink":"http://www.xyzardq.com/tags/UWP/"}]},{"title":"git新建SSHkey并添加到代码托管平台","date":"2016-11-16T05:04:33.000Z","path":"2016/11/16/git新建sshkey并添加到代码托管平台/","text":"检查当前电脑中有没有SSH key$ cd ~/. ssh如果提示No such file or directory则说明之前没有生成SSH key 生成新的SSH key123$ ssh-keygen -t rsa -C &quot;yourmail@youremail.com&lt;你的邮件地址&gt;&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt; ps1:此处的-C必须是大写然后系统会提示你输入密码12Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。然后就设置成功了。 添加SSH key到代码托管平台在本机设置SSH Key之后，需要添加到代码托管平台上，以完成SSH链接的设置。下面以Gtihub为例。 打开本地C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。ps1:Administrator是当前账户的名称，如果当前账户不是Admin，请选择进入相应名称的账户。 登陆github系统。点击右上角的 Settings - SSH and GPG keys - New SSH keys 把你本地生成的密钥复制到里面（key文本框中），名称栏填写一个名称（可随意填写）点击 add SSH key 就可以了。 测试添加SSH key是否成功1234$ ssh -T git@github.com&lt;git@github.com不要修改&gt;The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 输入yes，如果看到Hi xyzardq&lt;你的ID&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.那就说明SSH key已经设置成功了。 参考资料如何搭建一个独立博客——简明Github Pages与Hexo教程","tags":[{"name":"Git","slug":"Git","permalink":"http://www.xyzardq.com/tags/Git/"},{"name":"Github","slug":"Github","permalink":"http://www.xyzardq.com/tags/Github/"},{"name":"Coding","slug":"Coding","permalink":"http://www.xyzardq.com/tags/Coding/"}]},{"title":"Hexo多repositories部署及DNS分流","date":"2016-11-14T14:51:57.000Z","path":"2016/11/14/Hexo多repositories部署及DNS分流/","text":"通过Hexo+Github的方式将Blog搭建在Github上虽然既省钱又方便，但是有个缺点，就是从国内访问有点慢，如果Github被墙了Blog就无法访问了。本篇文章讲的就是如何将Hexo同时部署在Github,coding(原名Gitcafe)等多个代码托管平台上并开启各自的page服务，再通过DNSPod分流访问的方法。 多repositories部署1. 安装hexo-deployer-gitnpm install hexo-deployer-git –save 2. 在根目录下的配置文件_config.yml中添加deploy配置deploy配置是部署的基础，在deploy配置中，用户需填上部署服务器的类型，仓库名称，分支名等信息。一个正确的部署配置中至少要有type参数。标准格式：12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] 参数 描述 repo 库(Repository)地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测 message 自定义提交信息 &#40;默认为 Site updated: &#123;&#123; now&#40;’YYYY-MM-DD HH:mm:ss’&#41; &#125;&#125;&#41; 如果同时使用多个deployer，则格式为： 12345deploy:- type: git repo:- type: heroku repo: 不过以上格式有点臃肿，看了其他博主的配置方法，这种格式比较简洁：12345deploy:- type: git repo: &lt;repository url&gt;,[branch]- type: git repo: &lt;repository url&gt;,[branch] 以下是本人的配置：12345deploy:- type: git repo: git@github.com:xyzardq/xyzardq.github.io.git,master- type: git repo: git@git.coding.net:xyzardq/xyzardq.git,master 其中，repositories（仓库）的地址有两种形式：第一种是https，类似https://github.com/xyzardq/xyzardq.github.io.git第二种是SSH，类似git@github.com:xyzardq/xyzardq.github.io.git这两种仓库地址有什么区别呢？https是在部署时直接通过https协议push到对应的repositories，所以在push的时候需要输入仓库所对应的代码托管平台的账号密码。而SSH是在部署时用云端的公匙解锁本地的私匙，如果对应就直接push到对应的repositories，从而不用输入账户密码。本人比较推荐用SSH，毕竟不用输入密码比较方便。 两种repositories地址的使用方法Github的repositories地址提取位置在当前仓库的菜单栏右侧Coding的repositories地址提取位置在当前仓库的左下角 https地址的使用https地址的使用比较简单，直接把对应的https地址填入repo中然后在部署时输入账户密码即可 SSH地址的使用SSH地址需要配置SSH key，将公匙上传到云端后方可使用 配置SSH keygit新建SSHkey并添加到代码托管平台 将对应的SSH地址填入repo中即可 3. 部署到云端Hexo deploy 参数 描述 -g 部署前先搭建 -m “commit” 添加commit DNS分流现在，我们已经把Blog部署到了两个以上的平台上，那么，怎样才能根据访客不同的线路类型解析到不同的page上呢？这时就需要域名的DNS解析分流了。据我所知，目前DNSPod和cloudxds都支持DNS分流。DNSPod的免费版就支持DNS解析分流，但是缺点是免费版显性转址需要网站正常代理满30天….30天过去黄花菜都凉了，不过CNAME不受此限制。cloudxds的免费版号称DNSPod的收费版，但是缺点是没备案的域名用不了…所以如果是没备案的域名只能使用DNSPod了。下面以DNSpod为例。 注册DNSPodDNSPod 添加CNAME记录 添加要解析的域名ps:填写的域名不要带www前缀 添加CNAME记录由于我们要进行DNS分流解析，所以一般来说需要添加两条以上的CNAME记录，下面以分为国外和国内两条线路为例：ps:除了国外和国内，DNSPod还提供电信移动联通等运营商和谷歌百度等搜索引擎的线路提供修改NS记录什么是NS记录？ NS记录（name server）即域名服务器记录，用于指定该域名由哪个 DNS 服务器进行域名解析。注册域名时，总会有默认的 NS 记录。 ps:如果是在DNSPod注册的域名，请跳过此步。 记下DNSPod的域名服务器DNSPod的域名服务器存储在控制台的DNS记录中，默认为 f1g1ns1.dnspod.netf1g1ns2.dnspod.net 修改所用域名注册商的域名服务器登录所用域名的域名注册商，进入DNS管理，将域名服务器（有的注册商为DNS记录中的NS记录）修改为DNSPod的域名服务器 测试DNS解析是否生效打开Dns检测|Dns查询- 站长工具，输入你的域名，选择CNAME类型，检测。如果国内国外的响应IP分别为你设置的两个记录值，则DNS分流设置成功 参考资料同时将博客部署在Github和Gitcafe上，并通过DNSPOD分流使用 DNSPod 解决 GoDaddy 域名解析不稳定的问题","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Hexo常见问题解决方案","date":"2016-11-14T12:16:58.000Z","path":"2016/11/14/Hexo常见问题解决方案/","text":"异常 无法执行now()函数错误内容12FATAL (unknown path) [Line 7, Column 533] Error: Unable to call `now`, which is undefined or falsey Template render error: (unknown path) [Line 7, Column 533] 错误原因由于文章中有类似now()的结构，Hexo编译时误认为是now函数，结果找不到函数就报错了 解决方法将now( )的小括号通过&amp;#40; &amp;#41; 进行转换 部分插件加载失败错误内容ERROR Plugin load failed:hexo-generator-json-content 错误原因部分插件需要新版node.js支持 解决方法升级node.js 报错Deploy报错终极解决方案1.删除根目录下的.deploy_git文件夹2.在根目录运行hexo clean3.修改根目录下的_config.yml后运行hexo deploy部署到云端 参考资料Hexo在Github中搭建博客系统(6)异常处理Hexo常见问题解决方案","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Hexo添加文章目录","date":"2016-11-04T04:52:05.000Z","path":"2016/11/04/Hexo添加文章目录/","text":"全文转载自为Hexo博客添加目录。平时写类似添加功能的东西我都是看一遍网上的教程，自己理解后按自己的方法做然后写成文章的，这次全文摘抄是因为我TM根本看不懂，不会改…不过以后在学好前端后也会回来做修改（先挖好坑）个人更喜欢MOxFIVE建站日志这种类型的文章目录，不过那是修改好的主题，直接拿来用就没什么意思了。废话就这样，以下全文转载。本文的转载符合文章作者的版权声明。 前言Hexo博客系统的核心支持生成目录（Table of Contents），但其默认的主题Landscape并不支持目录的显示。我们只需对Landscape的主题文件稍作修改并添加一点目录的CSS就可以在文章前面显示友好的目录了。ps1:我修改的不是默认主题Landscape而是主题yilia，经实验yilia主题也可以应用这个方法。 食用方法修改Landscape主题的ejs文件我们首先要编辑文章显示页面的模板，也就是themes/landscape/layout/_partial/article.ejs文件。为了将目录生成在正文之前，我们首先在这个文件中找到&lt;%- post.content %&gt;，并在这一行之前加入如下代码：1234567&lt;!-- Table of Contents --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt; &lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt;&lt;% &#125; %&gt; 这段代码的含义清晰明了，if语句中有两个条件，!index是为了不在首页的文章摘要中生成目录，post.toc确保了只在显式地标记了toc: true的文章中生成目录。若这两个条件满足，则创建一个目录的&lt;div&gt;。 修改完这个文件之后，找一篇包含了多个子标题的文章，并在文章开头的front-matter中添加一句toc: true，在浏览器中访问这篇文章，应该可以看到文章的开头处已经有了带链接的目录。但是这样的目录实在太难看，我们还需要添加相应的CSS来将其指定为我们想要的样式。 为目录编写CSS文件要指定目录的样式，我们要修改的文件是themes/landscape/source/css/_partial/article.styl。在文件的最后，添加如下代码：12345678910111213141516171819202122232425/*toc*/.toc-article background #eee border 1px solid #bbb border-radius 10px margin 1.5em 0 0.3em 1.5em padding 1.2em 1em 0 1em max-width 28%.toc-title font-size 120%#toc line-height 1em font-size 0.9em float right .toc padding 0 margin 1em line-height 1.8em li list-style-type none .toc-child margin-left 1em 第一段的toc-article指定了目录整个&lt;div&gt;的背景色、边框色、倒角半径、各种间距以及最大的宽度。注意这里最好指定目录的最大宽度，我将其设为了28%，也就是文章正文那个框的宽度的28%，也可以设为一个固定的长度，比如在笔记本电脑上16em就是个不错的宽度，但为了能适配各种不同尺寸的屏幕，最好还是设置为百分比。如果不指定最大宽度，遇到比较长的标题时，生成的目录会非常难看。这个最大宽度的设置是我在网上其他添加目录的方法中没有见到的。 第二段的toc-title指的就是“文章目录”那四个字，这四个字要比其他字大一些，将其字号设为其他字的120%。 第三段的#toc.toc指定了目录列表的一些细节，将font-size设为0.9em会让目录的字比文章的字稍小一些。最后的.toc-child指定了二级目录的缩进量。 再次生成页面，应该已经可以显示比较美观的目录了。 参考资料为Hexo博客添加目录MOxFIVE建站日志","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Hexo添加分类功能","date":"2016-11-02T11:41:27.000Z","path":"2016/11/02/Hexo添加分类功能/","text":"添加分类功能其实很早就想添加分类功能，因为纯标签的分类太弱了，以前收藏的几个大佬的Blog都没写，今天逛了逛yilia主题的issure，找到了解决方案，还是在知乎上的…言归正传，下面开始正题。其实Hexo自带有归档功能categories，不过要先对配置文件进行一些修改。 食用方法1.生成（文章）时默认生成categories配置项categories有点类似tags，写在文章属性之中，所以需要在文章生成时添加categories属性。编辑/scaffolds/post.md，在最下面添加一行categories1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories: 2.在生成文章后编辑categories属性在新建文章后，编辑categories属性：1234title: Hexo添加归档/分类功能date: 2016-11-02 19:41:27tags: [Hexo,Blog]categories: 技巧经验 这样在文章发布后，使用hexo g命令，hexo会在根目录/public/categrises下自动生成归档文件夹 分类功能可视化以上，这样其实就成功添加了分类功能。不过这样添加的分类只能显示在文章的属性中，没有从首页直接查看分类的方法。以下提供一种实现方法 博客侧边栏展示归档实现效果 食用方法1.在主题配置文件中添加分类选项在主题配置文件themes/_config.yml中添加以下代码（#号后为注释内容）: 12345menu: 主页: / 所有文章: /archives 技巧经验: /categories/技巧经验 # 博客首页展示文本： 访问路径/自定义归档名称 资料总结: /categories/资料总结 常见问题及解决方案本地部署报错 目前在博客侧边栏添加此功能你后，在本地部署会报错，但是同步到云端后就可以正常显示了。 参考资料 hexo下新建页面下如何放多个文章？","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Chrome实用插件推荐","date":"2016-10-19T08:17:13.000Z","path":"2016/10/19/Chrome实用插件推荐/","text":"总结一些自用的或者网上看到的Chrome实用插件。ps:Chrome是最好用的浏览器好吗！ 网络工具TunnelloChrome应用商店（需要翻墙）官网（需要翻墙）一款免费翻墙软件，号称比别的翻墙工具更快更安全（目前提供14个国家的免费节点，支持国家如下：香港节点看y2b视频能到3000kbps，算是很不错的速度了。 Proxy SwitchyOmegaChrome应用商店（需要翻墙）Github一款魔法上网插件，如果使用shadowsocks进行翻墙的话需要配合Proxy SwitchyOmega在Chrome上实现，另外附带黑白名单功能。附简单教程：Chrome + Proxy SwitchyOmega 设置 Adblock PlusChrome应用商店（需要翻墙）官网这没什么好解释的…一款广告拦截软件，通过社区上不断更新的过滤列表拦截页面上的广告。 wappalyzerChrome应用商店（需要翻墙）官网一款网站前端分析插件，可以分析当前网站都用了什么数据库，什么服务器。 Chrono下载管理器Chrome应用商店（需要翻墙）官网一款下载功能增强插件，完全替换并增强Chrome浏览器自带的下载管理界面，可以嗅探器网页上的所有链接、图片、音频和视频，还支持批量加载等功能。 办公学习Anki 划词制卡助手Chrome应用商店（需要翻墙）Github官方介绍：英语学习者在新闻网站或者社交媒体上进行增量阅读(Incremental Reading)或者沉浸式阅读(Immersion Reading)时，往往需要能够随手翻译生词帮助理解，而阅读过后，又希望能将刚才阅读时遇到的生词和上下文语句作为笔记保存，以供日后复习。Anki本身提供了不错的间隔式复习功能，但是制卡的过程略微繁琐。Anki划词制卡助手，就是为了帮助学习者在阅读的同时，将生词，释义，音标，语音音频和上下文例句一键保存并制作成Anki卡片，以供日后复习。简单来说，Anki划卡制卡助手可以在阅读英文文章时查阅不明白的单词。如果想要日后记忆的话，就点击右上角的绿色加号将单词做成卡片，上传至ankiweb账号，在多平台查看记忆。 印象笔记·剪藏Chrome应用商店（需要翻墙）官网虽然evernote不是最好用的笔记本，（不支持markdowm啊啊啊啊啊）但是印象笔记·剪藏可以说是最好用的剪藏插件。在网页上看到什么值得收藏的文章，直接点击插件，设置剪藏类型，目录后即可收藏成笔记。特别推荐剪藏类型中的隐藏广告，直接把网页中的CSS样式屏蔽，只留下最简单的标题和正文。","tags":[{"name":"Google","slug":"Google","permalink":"http://www.xyzardq.com/tags/Google/"},{"name":"Chrome","slug":"Chrome","permalink":"http://www.xyzardq.com/tags/Chrome/"}]},{"title":"Git系列学习资料","date":"2016-10-11T04:56:13.000Z","path":"2016/10/11/Git学习资料/","text":"总结一些网上自己看过的Git和GitHub学习资料吧…新手向。 stormzhang的从0开始学习 GitHub 系列我自己先前也看过两三个Git和GitHub的教程，今天看完了张老师的教程，感觉是我看过所有GitHub教程中写的最好的。语言浅显易懂，内容涵盖面也很广，推荐给对Git和GitHub一无所知的新手学习。 从0开始学习 GitHub 系列之「初识 GitHub」从0开始学习 GitHub 系列之「加入 GitHub」从0开始学习 GitHub 系列之「GitHub 常见的几种操作」从0开始学习 GitHub 系列之「Git速成」从0开始学习 GitHub 系列之「向GitHub 提交代码」从0开始学习 GitHub 系列之「Git 进阶」从0开始学习 GitHub 系列之「团队合作利器 Branch」如何发现优秀的开源项目？ 廖雪峰的Git教程Git教程 - 廖雪峰的官方网站","tags":[{"name":"Git","slug":"Git","permalink":"http://www.xyzardq.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.xyzardq.com/tags/GitHub/"}]},{"title":"yilia主题侧边栏添加新的社交账号","date":"2016-05-11T12:14:28.000Z","path":"2016/05/11/yilia主题侧边栏添加新的社交账号/","text":"实现效果 如何实现准备材料首先需准备想要显示的图标文件，以png为佳，大小32×32（自带社交账号图标都为16×16，亲测后发现不好用，32×32比较合适） 详细过程图标位置自带图标的放置位置为themes/yilia/source/img 修改style文件打开themes/yilia/source/css/_partial/main.styl查找类似123456a.mail &#123; background:url(&apos;/img/mail.png&apos;) center no-repeat #005a87; border:1px solid #005a87; &amp;:hover &#123; border:1px solid #006b98; &#125; 的代码复制一段放在相同的位置，修改其中的函数名和图标位置。图标样式和背景色可自行修改。 修改config文件打开themes/yilia/_config.yml在subnav:下添加一行超链接，指向你想引向的网址格式类似github: “https://github.com/xyzardq“ 实现到此全部完成，部署后即可查看效果。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"},{"name":"yilia","slug":"yilia","permalink":"http://www.xyzardq.com/tags/yilia/"}]},{"title":"Hexo文章小技巧","date":"2016-04-17T12:45:56.000Z","path":"2016/04/17/Hexo文章小技巧/","text":"首页文章部分显示在需要在首页显示的内容后加&lt;!–more–&gt; 修改代码块大小和样式在themes/yilia/source/css/_partial/highlight.styl文件内修改 新增标签新建文章后，打开文章文件，在前几行有如下结构： 12title: Hexo写文章小技巧date: 2016-04-17 20:45:56 在date这行下面加上： tags: [tag1,tag2,tag3] #tag1，tag2，tag3为你要添加的多个标签，用半角逗号隔开 新增分类方法同上，在下面加上 categories: 技巧经验需要先完成Hexo添加分类功能中的设置 新增置顶方法同上，在下面加上 top: 1 #大的在前面需要先完成Hexo添加文章置顶中的设置 新增文章目录方法同上，在下面加上 toc: true需要先完成Hexo添加文章目录中的设置","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"},{"name":"yilia","slug":"yilia","permalink":"http://www.xyzardq.com/tags/yilia/"}]},{"title":"Hexo新建文章后立即打开文本编辑器","date":"2016-04-14T13:50:23.000Z","path":"2016/04/14/Hexo新建文章后立即打开文本编辑器/","text":"平时在Hexo根目录下new一篇文章以后还要手动打开文件夹中的文件进行编辑。创建这个脚本后就可以在 hexo new XXX一篇新文章后直接打开用文本编辑器打开该文章进行编辑。 食用方法新建scripts/openfile.js（名字任取，文件夹没有就新建一个） 1234var exec = require(&apos;child_process&apos;).exec;hexo.on(&apos;new&apos;, function(data)&#123; exec(&apos;start &quot;D:/Program Files/Sublime Text 3/sublime_text.exe&quot; &apos; + data.path);&#125;); ps1:仅Hexo 3.0后有效ps2:将代码中的路径替换为你的文本编辑器的绝对路径 补充当打开.md文件的默认打开方式已经为文本编辑器时，代码则为：1234var exec = require(&apos;child_process&apos;).exec;hexo.on(&apos;new&apos;, function(data)&#123; exec(&apos;start &apos; + data.path);&#125;); ps1:仅Hexo 3.0后有效","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Hexo添加文章置顶","date":"2016-04-14T13:49:24.000Z","path":"2016/04/14/Hexo添加文章置顶/","text":"置顶功能完全借鉴了Netcan的智慧成果…原理大概是C++的比较函数，具体到下面Netcan的博客里查看。 食用方法更改node_modules/hexo-generator-index/lib/generator.js 1234567891011121314151617181920212223242526272829&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 使用方法：在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序。（大的在前面）ps1:front-matter是每篇文章前面的参数，例如：1234title: Android学习资料top: 3date: 2016-04-07 20:16:43tags: [Java,Android] 参考资料解决Hexo置顶问题Front-matter官方说明文档","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Hexo配置小技巧","date":"2016-04-14T12:25:04.000Z","path":"2016/04/14/Hexo配置小技巧/","text":"配置简体中文食用方法更改根目录下 _config.yml 中language的值。 language: zh-Hans 在网上查找发现很多修改成zh、zh-CN经过测试都不能修改成完美的简体中文，菜单还是英文。只有zh-Hans才能配置成完美的简体中文。ps1:检查主题文件后发现语言包已经内置在主题内了，在themes\\yilia\\languages目录下（本人用的yilia主题，不懂其他主题是否是类似的文件结构）","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.xyzardq.com/tags/Hexo/"}]},{"title":"Android学习资料","date":"2016-04-07T12:16:43.000Z","path":"2016/04/07/Android学习资料/","text":"本人于2016年3月21日加入中南民族大学新思路安卓组，开始学习Android开发。就在这里记录下一路学习使用的学习资料吧（其实是试验置顶功能2333）ps1.带有ps的是本人学习所用的资料。ps2.我觉得ps1在卖萌; Java基础Mars老师的Java4Android视频课程结合学习，便于初学者很好的理解与入门。Java4Android视频下载（百度网盘）ps1.已经学完，讲的十分浅显，对于入门Android基本是够用了。 《Java语言程序设计》优点是非常基础，适合初学者，建议只要看到前十四章就ok了，第十二章也可以略过。《Java语言程序设计》豆瓣书评 Android入门Android入门基础：从这里开始Android入门基础：从这里开始ps1.据说是官方资料的翻译版，讲的非常详细。 imoocAndroid开发视频教程ps1.看了Android攻城狮的第一门课系列，讲的很浅，适合初学者。唯一的问题就是用的IDE是eclipse。不过和eclipse和AS的差别很小，还可以接受。 疯狂Android讲义（第3版）讲得特别详细，可以当做官方sdk来看 参考资料如何自学Android编程（推荐）","tags":[{"name":"Java","slug":"Java","permalink":"http://www.xyzardq.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://www.xyzardq.com/tags/Android/"}]},{"title":"在Windows命令行下编译包含中文字符的Java文件时报错","date":"2016-04-06T13:15:45.000Z","path":"2016/04/06/在Windows命令行下编译包含中文字符的Java文件时报错/","text":"在初学Java编程并使用cmd编译Java文件时会出现类似的错误经过搜索查找后，找到两种解决方法：1.编译Java文件时选择编码为uft-8 无BOM格式编译 javac -encoding utf-8 Exerc02.java 2.保存Java文件时选择编码为uft-8 无BOM格式保存","tags":[{"name":"Java","slug":"Java","permalink":"http://www.xyzardq.com/tags/Java/"},{"name":"encoding","slug":"encoding","permalink":"http://www.xyzardq.com/tags/encoding/"}]},{"title":"在不引入第三个变量的前提下，交换两个变量的值","date":"2016-04-02T10:47:04.000Z","path":"2016/04/02/在不引入第三个变量的前提下，交换两个变量的值/","text":"12a=a+b;/*此时a的值为a+b*/b=a-b;/*此时a的值为a+b，则此时的a-b等同于a+b-b，就成功把a的值换到了b上*/","tags":[{"name":"C","slug":"C","permalink":"http://www.xyzardq.com/tags/C/"},{"name":"C++","slug":"C","permalink":"http://www.xyzardq.com/tags/C/"}]}]